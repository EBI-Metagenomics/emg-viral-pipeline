#!/usr/bin/env python3
 
import os
import re
import glob
import sys
import operator
import argparse
from ete3 import NCBITaxa

###############################################################################################
# This script was written as part of the analysis conducted on the output generated by        #
# hmmsearch, when the ViPhOG database was searched against UniProtKB. The ViPhOG profile HMM  #
# files were stored in different directories, each containing maximum 2000 files and named    #
# using a sequential number from 1 to 16 (hmm1...hmm16). For each one of these a corresponding#
# output directory was generated, each containing a domtbl output file for each of the files  #
# stored in the hmm directories. The output directories were named using the same sequential  #
# numbers as the directories storing the hmm files (hmm1domtbl...hmm16domtbl).                #
###############################################################################################

parser = argparse.ArgumentParser(description = "Second step: Generate summary table of hmmsearch results for ViPhOGs vs UniProt, for each chunk file. Make sure to run the script from within the directory containing the domtbl output directories (check comment block for guidance) and following the script that executes Step 1")
parser.add_argument("-i", "--input", dest = "input_file", help = "Path to input chunk file", required = True)

if len(sys.argv) == 1:
	parser.print_help()

else:

	args = parser.parse_args()
	chunk_file = args.input_file

	ncbi = NCBITaxa()

	tax_ranks_list = ["genus", "subfamily", "family", "order"]
	with open(f"{os.path.splitext(chunk_file)[0]}_summ.tsv", "w") as output_file:
		output_file.write("ViPhOG_ID\tUnique_hits\tGenus\tSubfamily\tFamily\tOrder\n")
		with open(chunk_file) as input_file:
			next(input_file)
			for line in input_file:
				line = line.rstrip()
				viphog_id = line.split("\t")[0]
				unique_hits = line.split("\t")[1]
				results_file = glob.glob("hmm*_domtbl/%s_*.tbl" % viphog_id)[0]
				with open(results_file) as hits_file:
					taxid_dict = {}
					for row in hits_file:
						if not re.search(r"^#", row) and float(row.split()[6]) <= 1e-3:
							taxid = [x.split("=")[1] for x in row.split() if re.search(r"OX=", x)][0]
							if taxid not in taxid_dict.keys():
								taxid_dict[taxid] = [float(row.split()[7])]
							elif float(row.split()[7]) not in taxid_dict[taxid]:
								taxid_dict[taxid].append(float(row.split()[7]))
				results_per_rank = []
				for elem in tax_ranks_list:
					elem_results = {}
					for key,value in taxid_dict.items():
						try:
							hit_lineage = ncbi.get_lineage(key)
							lineage_names = ncbi.get_taxid_translator(hit_lineage)
							lineage_ranks = ncbi.get_rank(hit_lineage)
							for x,y in lineage_ranks.items():
								if y == elem and lineage_names[x] not in elem_results.keys():
									elem_results[lineage_names[x]] = [1, [max(value)]]
									break
								elif y == elem:
									elem_results[lineage_names[x]][0] += 1
									elem_results[lineage_names[x]][1].append(max(value))
									break
						except:
							continue
					results_per_rank.append([(taxon, features[0], max(features[1]), min(features[1])) for taxon,features in elem_results.items()])
				output_file.write("{}\t{}\t{}\t{}\t{}\t{}\n".format(viphog_id, unique_hits, results_per_rank[0], results_per_rank[1], results_per_rank[2], results_per_rank[3]))
