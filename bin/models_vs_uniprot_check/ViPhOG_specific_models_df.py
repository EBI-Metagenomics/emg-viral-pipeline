#!/usr/bin/env python3

import os
import re
import glob
import sys
import operator
import ast
import argparse
import pandas as pd
import matplotlib.pyplot as plt
from ete3 import NCBITaxa

###############################################################################################
# This script was written as part of the analysis conducted on the output generated by        #
# hmmsearch, when the ViPhOG database was searched against UniProtKB. The ViPhOG profile HMM  #
# files were stored in different directories, each containing maximum 2000 files and named    #
# using a sequential number from 1 to 16 (hmm1...hmm16). For each one of these a corresponding#
# output directory was generated, each containing a domtbl output file for each of the files  #
# stored in the hmm directories. The output directories were named using the same sequential  #
# numbers as the directories storing the hmm files (hmm1domtbl...hmm16domtbl).                #
###############################################################################################

parser = argparse.ArgumentParser(description = 'Step 4: Generate pickled dataframe of ViPhOGs selected as viral taxonomic markers. Make sure to run the script from within the directory containing the domtbl output directories (check comment block for guidance) and following the scripts that execute Step 1, Step 2 and Step 3', add_help = False)
parser.add_argument('-h', '--help', dest = 'help', action = 'store_true', help = 'Use flag to print this help message')
args = parser.parse_args()

if args.help:
	parser.print_help()
else:
	print('Looking for taxonomic rank summary files...')
	if not os.path.exists('unique_hits_chunks'):
		print('unique_hits_chunks directory not found')
		parser.print_help()
	else:
		ncbi = NCBITaxa()
		tax_rank_list = ['Genus', 'Subfamily', 'Family', 'Order']
		dataframe_list = []
		overall_viphog_list = []
		for item in tax_rank_list:
			viphog_list = []
			hit_number_list = []
			taxon_list = []
			category_list = []
			min_score_list = []
			next_score_list = []
			print(f'Looking for {item} level summary files...')
			summary_files = glob.glob(f'unique_hits_chunks/*{item}.tsv')
			if len(summary_files) < 1:
				print(f'No summary files found for taxon rank {item}')
			else:
				print(f'Done!, now parsing data in {item} level summary files')
				for elem in summary_files:
						with open(elem) as input_file:
							input_df = pd.read_csv(input_file, sep = '\t')
							for row,data in input_df.iterrows():
								if data['#_taxons'] != 0 and pd.isnull(data['Overlapping_taxons']) and data['ViPhOG'] not in overall_viphog_list:
									overall_viphog_list.append(data['ViPhOG'])
									viphog_list.append(data['ViPhOG'])
									hit_number_list.append(data['#_taxons'])
									min_score_list.append(ast.literal_eval(data['Max_min_score'])[1])
									next_score_list.append(data['Next_max_score'])
									taxon_name = data['Most_significant']
									taxon_list.append(taxon_name)
									taxon_name_id = ncbi.get_name_translator([taxon_name])
									taxon_lineage = ncbi.get_lineage(taxon_name_id[taxon_name][0])
									taxon_lineage_names = ncbi.get_taxid_translator(taxon_lineage)
									if 'Viruses' in taxon_lineage_names.values():
										category_list.append('Viral')
									else:
										category_list.append('Non-viral')
								else:
									continue
				taxon_df = pd.DataFrame(dict(zip(['ViPhOG', '#_taxons', 'Best_taxon', 'Category', 'Min_score', 'Next_max_score'], [viphog_list, hit_number_list, taxon_list, category_list, min_score_list, next_score_list])))
				taxon_df['Rank'] = item
				dataframe_list.append(taxon_df)
				print(f'Done processing summary files at {item} level')
		print('Generating dataframe listing all identified specific ViPhOGs...')
		final_df = pd.concat(dataframe_list)
		print('Done!')
		final_df = final_df.reset_index(drop = True)
		print('Filtering out entries not associated with viral taxons...')
		viral_final_df = final_df[final_df['Category'] == 'Viral']
		viral_final_df = viral_final_df.reset_index(drop = True)
		print('Done!')
		print('Adding information about host type for viral taxa linked to specific ViPhOGs...')
		if not os.path.exists('virushostdb.tsv'):
			print('virushostdb.tsv file not found, can not add host type info to dataframe')
		else:
			virus_to_host_file = 'virushostdb.tsv'
			virus_to_host_df = pd.read_csv(virus_to_host_file, sep = '\t')
			org_type_dict = {'Prokaryote':set(), 'Eukaryote':set()}
			for row,data in virus_to_host_df.iterrows():
				if pd.notnull(data['host lineage']) and pd.notnull(data['virus lineage']):
					if data['host lineage'].split('; ')[0] == 'Eukaryota':
						for item in data['virus lineage'].split('; '):
							org_type_dict['Eukaryote'].add(item)
					elif data['host lineage'].split('; ')[0] == 'Bacteria' or data['host lineage'].split('; ')[0] == 'Archaea':
						for item in data['virus lineage'].split('; '):
							org_type_dict['Prokaryote'].add(item)
			org_type_dict['Eukaryote'].difference_update({'Caudovirales', 'Microviridae', 'Podoviridae', 'Siphoviridae', 'crAss-like viruses', 'unclassified Caudovirales', 'unclassified Microviridae', 'unclassified Podoviridae', 'unclassified Siphoviridae'})
			org_type_dict['Eukaryote'].update({'Catovirus', 'Klosneuvirus', 'Klosneuvirinae'})
			def host_type(row):
				if row['Best_taxon'] in org_type_dict['Eukaryote']:
					return 'Eukaryote'
				elif row['Best_taxon'] in org_type_dict['Prokaryote']:
					return 'Prokaryote'
				else:
					return 'None'
			viral_final_df['Host_type'] = viral_final_df.apply(host_type, axis = 1)
			print('Done adding host type info')
		print('Saving ViPhOG specific dataframe as pickled object...')
		viral_final_df.to_pickle('ViPhOG_viral_specific_df.pkl')
		print('Done!')