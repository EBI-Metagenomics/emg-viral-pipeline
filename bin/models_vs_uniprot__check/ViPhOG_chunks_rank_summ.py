#!/usr/bin/env python3

import os
import re
import glob
import sys
import operator
import ast
import argparse

###############################################################################################
# This script was written as part of the analysis conducted on the output generated by        #
# hmmsearch, when the ViPhOG database was searched against UniProtKB. The ViPhOG profile HMM  #
# files were stored in different directories, each containing maximum 2000 files and named    #
# using a sequential number from 1 to 16 (hmm1...hmm16). For each one of these a corresponding#
# output directory was generated, each containing a domtbl output file for each of the files  #
# stored in the hmm directories. The output directories were named using the same sequential  #
# numbers as the directories storing the hmm files (hmm1domtbl...hmm16domtbl).                #
###############################################################################################

parser = argparse.ArgumentParser(description = "Step 3: Generate summary tables for each taxonomic rank. Make sure to run the script from within the directory containing the domtbl output directories (check comment block for guidance) and following the scripts that execute Step 1 and Step 2")
parser.add_argument("-i", "--input", dest = "input_file", help = "Path to summary chunk file", required = True)

if len(sys.argv) == 1:
	parser.print_help()
	
else:
	args = parser.parse_args()
	summ_file = args.input_file
	with open(summ_file) as input_file:
		header_line = input_file.readline().rstrip()
		taxa_ranks = []
		for x,y in enumerate(header_line.split("\t")):
			if x >= 2:
				taxa_ranks.append((x, y))
		for x,y in taxa_ranks:
			input_file.seek(0)
			next(input_file)
			with open(f"{os.path.splitext(summ_file)[0]}_{y}.tsv", "w") as output_file:
				output_file.write("ViPhOG\t#_taxons\tMost_significant\tMax_min_score\tOverlapping_taxons\tNext_max_score\n")
				for line in input_file:
					line = line.rstrip()
					viphog_id = line.split("\t")[0]
					rank_hits = ast.literal_eval(line.split("\t")[x])
					total_hits = len(rank_hits)
					most_significant = ""
					score_range = ""
					overlap = ""
					next_max_score = ""
					if total_hits > 0:
						rank_hits_sorted = sorted(rank_hits, key = operator.itemgetter(2), reverse = True)
						most_significant = rank_hits_sorted[0][0]
						score_range = (rank_hits_sorted[0][2], rank_hits_sorted[0][3])
						if total_hits > 1:
							overlap = []
							for elem in rank_hits_sorted[1:]:
								if elem[2] >= score_range[1]:
									overlap.append((elem[0], elem[2]))
							if len(overlap) < 1:
								overlap = ""
								next_max_score = rank_hits_sorted[1][2]
					output_file.write("{}\t{}\t{}\t{}\t{}\t{}\n".format(viphog_id, total_hits, most_significant, score_range, overlap, next_max_score))