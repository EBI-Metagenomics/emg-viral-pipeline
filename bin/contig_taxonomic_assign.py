#!/usr/bin/env python3

import argparse
import csv
import os
import re
import math
from collections import Counter

import pandas as pd
from ete3 import NCBITaxa


def main(args):
    """Generate tabular file with taxonomic assignment of viral contigs based on ViPhOG annotations"""
    input_df = pd.read_csv(args.input_file, sep="\t")

    factor_file = args.factor

    with open(factor_file, newline="") as infile:
        csv_reader = csv.reader(infile)
        next(csv_reader)
        factor_dict = {
            name: {
                "avg_cds": float(avg_cds),
                "std_cds": float(std_cds),
                "factor": float(mult_factor),
            }
            for name, *_, avg_cds, std_cds, _, mult_factor in csv_reader
        }

    file_header = ["contig_ID", "genus", "subfamily", "family", "order", "class"]

    output_gen = contig_tax(input_df, args.ncbi_db, args.tax_thres, factor_dict)

    print(args.input_file)

    out_file = re.split(r"\.[a-z]+$", os.path.basename(args.input_file))[0]

    with open(
        os.path.join(args.outdir, out_file + "_taxonomy.tsv"), "w", newline=""
    ) as output_file:
        tsv_writer = csv.writer(output_file, delimiter="\t", quoting=csv.QUOTE_MINIMAL)
        tsv_writer.writerow(file_header)
        for item in output_gen:
            tsv_writer.writerow(item)


def contig_tax(annot_df, ncbi_db, tax_thres, taxon_factor_dict):
    """This function takes the annotation table generated by viral_contig_maps.py and generates a table that
    provides the taxonomic lineage of each viral contig, based on the corresponding ViPhOG annotations"""

    ncbi = NCBITaxa(dbfile=ncbi_db)
    tax_rank_order = ["genus", "subfamily", "family", "order", "class"]
    contig_set = set(annot_df["Contig"])

    for contig in contig_set:
        contig_lineage = [contig]
        contig_df = annot_df[annot_df["Contig"] == contig]
        total_prot = len(contig_df)
        annot_prot = sum(contig_df["Best_hit"] != "No hit")
        if annot_prot == 0:
            contig_lineage.extend([""] * 4)
        else:
            contig_hits = contig_df[pd.notnull(contig_df["Label"])]["Label"].values
            taxid_list = [
                ncbi.get_name_translator([item])[item][0] for item in contig_hits
            ]
            hit_lineages = [
                {
                    y: ncbi.get_taxid_translator([x])[x]
                    for x, y in ncbi.get_rank(ncbi.get_lineage(item)).items()
                    if y in tax_rank_order[:-1]
                }
                for item in taxid_list
            ]
            for rank in tax_rank_order[:-1]:
                taxon_list = [item.get(rank) for item in hit_lineages]
                total_hits = sum(pd.notnull(taxon_list))
                if total_hits == 0:
                    contig_lineage.append("")
                    continue
                else:
                    count_hits = Counter(
                        [item for item in taxon_list if pd.notnull(item)]
                    )
                    under_thres = []
                    over_thres = []
                    for hit_taxon, hit_count in count_hits.items():
                        prop_hits = hit_count / total_hits
                        taxon_factor = (
                            taxon_factor_dict[hit_taxon]["factor"]
                            if hit_taxon in taxon_factor_dict.keys()
                            else 1
                        )
                        if prop_hits < tax_thres * taxon_factor:
                            hit_bound = math.ceil(tax_thres * taxon_factor * total_hits)
                            hit_diff = hit_bound - hit_count
                            under_thres.append((hit_taxon, hit_diff))
                        else:
                            over_thres.append((hit_taxon, prop_hits))
                    if len(over_thres) == 0:
                        best_under = sorted(under_thres, key=lambda x: x[1])[0]
                        contig_lineage.append(best_under[1])
                    else:
                        sorted_over_thres = [
                            x
                            for x, y in sorted(
                                over_thres, key=lambda x: x[1], reverse=True
                            )
                        ]
                        for taxon in sorted_over_thres:
                            if (
                                taxon in taxon_factor_dict.keys()
                                and total_prot
                                <= taxon_factor_dict[taxon].get("avg_cds")
                                + 2 * taxon_factor_dict[taxon].get("std_cds")
                            ):
                                taxon_taxid = ncbi.get_name_translator([taxon])[taxon][
                                    0
                                ]
                                taxon_lineage = ncbi.get_lineage(taxon_taxid)
                                taxon_lineage_dict = {
                                    y: ncbi.get_taxid_translator([x])[x]
                                    for x, y in ncbi.get_rank(taxon_lineage).items()
                                    if y in tax_rank_order[tax_rank_order.index(rank) :]
                                }
                                taxon_lineage_list = [
                                    taxon_lineage_dict.get(item, "")
                                    for item in tax_rank_order[
                                        tax_rank_order.index(rank) :
                                    ]
                                ]
                                break
                        else:
                            contig_lineage.append("")
                            continue
                        contig_lineage.extend(taxon_lineage_list)
                        break
        yield contig_lineage


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Generate tabular file with taxonomic assignment of viral contigs based on ViPhOG annotations"
    )
    parser.add_argument(
        "-d",
        "--db",
        dest="ncbi_db",
        help="path to the ete3 processed NCBI taxonomy db.",
    )
    parser.add_argument(
        "-i",
        "--input",
        dest="input_file",
        help="Annotation table generated with script viral_contig_maps.py",
        required=True,
    )
    parser.add_argument(
        "-f",
        "--factor",
        dest="factor",
        help="File containing viphog-specific multiplication factors.",
    )
    parser.add_argument(
        "--taxthres",
        dest="tax_thres",
        type=float,
        help="Minimum proportion of annotated genes required for taxonomic assignment (default: 0.6)",
        default=0.6,
    )
    parser.add_argument(
        "-o",
        "--outdir",
        dest="outdir",
        help="Relative path to directory where you want the output file to be stored (default: cwd)",
        default=".",
    )
    args = parser.parse_args()

    main(args)
